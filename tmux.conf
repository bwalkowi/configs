#################################################
##                                             ##
##             GENERAL SETTINGS                ##
##                                             ##
#################################################

# Set C-a as secondary prefix, do not disable standard prefix
#set -g prefix None
set -g prefix2 C-a

# Set default terminal and xterm keys
set -g default-terminal screen
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'
if "echo $TERM | grep 256color" 'set -ag default-terminal -256color'

## tmux uses /bin/sh -c to execute the shell command thus, the command must be POSIX compliant, 
## so tests of the form [[ are not guaranteed to be portable. Modern Ubuntu and Debian systems, 
## for example, symlink /bin/sh to dash.
# if "[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]" 'set -ag default-terminal -256color'

setw -g xterm-keys on


# Set windows/panes indexing and naming options
set -g base-index 1
set -g renumber-windows on              # renumber windows when one is closed
setw -g pane-base-index 1
setw -g automatic-rename on             # active only if window name was not specified at window creation
setw -g allow-rename off                # do not allow programs to change window name

# Highlight the active pane
setw -g window-style 'bg=#181818'       # shade bg of inactive panes
setw -g window-active-style 'bg=black'  # active pane stays black

# Enable mouse support
set -g mouse on

# Miscellaneus
set -sg escape-time 0                   # delay (miliseconds) between prefix and command
set -g history-limit 100000             # number of lines possible to scroll back in copy mode and not commands history
set -g buffer-limit 20                  # number of copy buffers
set -g repeat-time 500                  # time for repeating of a hotkey bound using the -r flag without having to type the prefix again
set -g display-time 1500                # display status line messages and other on-screen indicators for 1,5 s (or until a key is pressed)
set -g remain-on-exit off
setw -g aggressive-resize on


#################################################
##                                             ##
##            MONITORING ACTIVITY              ##
##                                             ##
#################################################

# Disable monitoring of activity (e.g. every print) in all windows by default
setw -g monitor-activity off

# Toggle activity monitoring for a window
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'

# Enable visual notifications of activity event in other windows
set -g visual-activity on
set -g activity-action other

# Disable monitoring of silence in all windows by default
setw -g monitor-silence 0

# Set or unset silence monitoring for a window
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Enable visual notifications of silence event in other windows
set -g visual-silence on
set -g silence-action other

# Enable bell monitoring in all windows by default. 
# It allows to monitor long lasting tasks if shell 
# prehook called before printing of user prompt is 
# also properly set/configured.
#
# Example prehooks for bash and zsh:
#
# .bashrc
#
# PROMPT_COMMAND='echo -n -e "\a"'
#
# .zshrc
# 
# precmd () {
#   echo -n -e "\a"
# }
#
setw -g monitor-bell on

# Enable visual notifications of bell event in other windows
set -g visual-bell on
set -g bell-action other


#################################################
##                                             ##
##                KEY BINDINGS                 ##
##                                             ##
#################################################

# Reload configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded!"

# Create new window
bind c new-window
bind C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Select and swap windows
bind -n S-left previous-window
bind -n S-right next-window
bind -n C-S-left swap-window -d -t -1
bind -n C-S-right swap-window -d -t +1

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Toggle panes synchronization
bind C-s setw synchronize-panes

# Kill pane/window/session
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Show options
bind C-o show-options -g

# Toggle mouse
bind C-m set -g mouse \; display 'Mouse [#{?mouse,ON,OFF}]'

# Use if Home/End does not working properly (happens with some terminals)
# bind -n End send-key C-e
# bind -n Home send-key C-a


#################################################
##                                             ##
##      COPY MODE, SCROLL AND CLIPBOARD        ##
##                                             ##
#################################################

# Set vi style key table for copy mode
setw -g mode-keys vi

# Make PageUp enter copy mode in case of absence of alternate screen, otherwise behave normally
bind -n PageUp if -F "#{alternate_on}" "send-keys PageUp" "copy-mode -eu"

# Trigger copy mode
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# Make mouse scrolls alternate screen aware. Also send 3 times Up/Down instead of mouse event 
# if in alternate screen in case of apps not handling properly mouse events (e.g. man, less, etc)
bind -n WheelUpPane   if -F -t = "#{alternate_on}" "send-keys -N 3 Up" "select-pane -t =; copy-mode -e; send-keys -M"
bind -n WheelDownPane if -F -t = "#{alternate_on}" "send-keys -N 3 Down" "select-pane -t =; send-keys -M"

# Reduce number of scrolled rows per mouse scroll to "2"
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# Additional vi mode key bindings
bind -T copy-mode-vi C-Left            send-keys -X previous-word
bind -T copy-mode-vi C-Right           send-keys -X next-word
bind -T copy-mode-vi Home              send-keys -X start-of-line
bind -T copy-mode-vi End               send-keys -X end-of-line

# Set clipboard support with OSC 52 on (works only on few terminal emulators)
# set -g set-clipboard on

# Set shortcuts to copy from tmux internal buffer
bind p choose-buffer -Z -F '#{buffer_sample}' "paste-buffer -p -b '%%'"
bind C-p paste-buffer -p

# Stop selection rather than copy-and-exit on mause drag end and clear it on mouse click
bind -T copy-mode-vi MouseDragEnd1Pane    send-keys -X stop-selection
bind -T copy-mode-vi MouseDown1Pane       select-pane \; send-keys -X clear-selection

# Copy selected text
bind -T copy-mode-vi Enter  send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
bind -T copy-mode-vi y      send-keys -X copy-pipe "xclip -sel clip -i"


#################################################
##                                             ##
##                STATUS LINE                  ##
##                                             ##
#################################################

# configure status line defaults
setw -ag message-style fg=yellow,bg=black
set -g status-interval 1                            # update the status every second
set -g status-style fg=white,bg=black

is_keys_off="#[fg=white,bg=red]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

# configure left part of status line
set -g status-left-length 40
set -g status-left "$is_keys_off #[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"

# configure window list on status line
set -g status-justify centre
setw -g window-status-style fg=cyan,bg=black
setw -g window-status-current-style fg=white,bold,bg=red

# configure right part of status line
set -g status-right "#[fg=magenta]%d %b %y #[fg=cyan]%H:%M:%S"


#################################################
##                                             ##
##              NESTING SESSIONS               ##
##                                             ##
#################################################


# TODO change style (e.g. status) when keys are OFF

# Turn off all key bindings on local session, so all key strokes are send to nested session
bind -T root F1  \
    set prefix2 None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F1 \
    set -u prefix2 \;\
    set -u key-table \;\
    refresh-client -S


#################################################
##                                             ##
##                DISPLAY MENU                 ##
##                                             ##
#################################################


bind i display-menu -y 0 \
    'server information' i info \
    'key bindings' k lsk \
    'aliases' a { run 'tmux show -s command-alias | column -t -s= | sed "s/^command-alias\[[0-9]*]\s*//; s/^\"\|\"$//g"' } \
    'sourced files' f { run 'cd "$(mktemp -d /tmp/.tmux.XXXXXXXXXX)" \
        ; TERM="#{client_termname}" tmux -v -Ldm start \
        ; grep loading tmux-server*.log | grep -v grep | sed "s/.*loading \(.*\)/\1/"' } \
    '' \
    'options' o { display-menu -y 0 \
        'server options' C-s { show -s } \
        'global session options' s { show -g } \
        'local session options' S { show } \
        '' \
        'global window options' w { show -gw } \
        'local window options' W { show -w } \
        'local pane options' p { show -p } \
    } \
    '' \
    'global hooks' h { show-hooks -g } \
    'local hooks' H { show-hooks } \
    '' \
    'global environment' e { showenv -g } \
    'local environment' E { showenv } \
    '' \
    'outer terminfo description' t { run 'infocmp -1x "#{client_termname}" | sort' } \
    'inner terminfo description' T { run 'infocmp -1x "#{default-terminal}" | sort' } \
